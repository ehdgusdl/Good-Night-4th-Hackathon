services:
  # Spring Boot 애플리케이션 서비스
  springboot-app:
    build: .
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        # mysql 컨테이너가 'healthy' 상태가 될 때까지 기다립니다.
        condition: service_healthy
      redis:
        # redis는 시작이 빠르므로 condition을 안 걸어도 보통 괜찮습니다.
        condition: service_started
    environment:
      # 애플리케이션 기본 설정
      - SPRING_APPLICATION_NAME=ticket-seller
      - SERVER_PORT=8080
      
      # Swagger 설정
      - SPRINGDOC_SWAGGER_UI_PATH=/swagger-ui.html
      - SPRINGDOC_API_DOCS_PATH=/v3/api-docs
      - SPRINGDOC_SWAGGER_UI_ENABLED=true
      
      # 데이터베이스 설정
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/ticket_seller?useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=ticketseller
      - SPRING_DATASOURCE_PASSWORD=ticketseller123
      
      # Redis 설정
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      
      # JPA 설정
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL=true
      
      # Spring Security 설정 (개발용 - 모든 요청 허용)

  # MySQL 서비스
  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_DATABASE=ticket_seller
      - MYSQL_USER=ticketseller
      - MYSQL_PASSWORD=ticketseller123
      - MYSQL_ROOT_PASSWORD=root123
    volumes:
      - mysql-data:/var/lib/mysql
    # healthcheck 추가: MySQL 서버가 실제로 연결을 받을 수 있는지 검사
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "ticketseller", "-pticketseller123"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis 서비스
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    # Redis도 healthcheck를 추가하면 더 안정적입니다.
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mysql-data:
  redis-data: